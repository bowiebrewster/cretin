from importlib import reload
import numpy as np
import matplotlib.pyplot as plt
import h5py, os, glob
import generator_object, to_generator_file, search, paths #these python classes should be in the same folder as cretin_main
for obj in [generator_object, to_generator_file, search, paths]:
    reload(obj)


def write(name : str, object):
    string = to_generator_file.Text_generator(object).execute()

    if not os.path.exists(paths.to_folder_test() + name):
        os.makedirs(paths.to_folder_test() + name)

    file_loc = paths.to_folder_test() + name + '/' + name + '.gen'
    print(f'writing too {file_loc}')
    with open(file_loc, 'w') as f:
        for x in string:
            f.write(str(x))

#  running cretin using the written generator file
def run(name):
    print(f'running cretin with {name}')
    import subprocess

    env = os.environ.copy()
    env["ARG_NAME0"] = name

    process = subprocess.Popen(paths.to_folder_cretin() + 'demo.sh', shell = True , stdout = subprocess.PIPE, stderr = subprocess.PIPE, env = env)
    process.wait() # Wait for process to complete.
    out, err = process.communicate()

    print(out.decode())
    print(err.decode())

# the data generated by cretin can be used for plots 
def plot(name):
    path_test = paths.to_folder_test()
    os.chdir(path_test + '/' + name)
    file_list = glob.glob('*.d*')
    print(file_list)
    fullpath = path_test + '/' + name + '/' + file_list[0]

    with h5py.File(fullpath, 'r') as f:
        counter = 0
        path = path_test + name + '/images'
        if not os.path.exists(path):
            os.mkdir(path)
            
        print(f'plotting {name} too {path}')


        for key, value in f.items():

            arr = np.array(f[key]);
            print(f'plot nr \t {counter} \t {key} \t {np.shape(arr)}')

            if len(arr.shape) == 2:
                fig, ax = plt.subplots();
                im = ax.imshow(arr);
                ax.set_title(key);
                
                fig.savefig(f'{path}/{key}.png');
                fig.clf(); 
                plt.close()

            if len(arr.shape) == 1 and len(arr) > 0:
                plt.plot(arr);
                plt.title(key);
                plt.savefig(f'{path}/{key}.png');
                plt.clf();
                plt.close()

            counter += 1

def all(name: str, object):
    write(name, object)
    run(name)
    plot(name)

